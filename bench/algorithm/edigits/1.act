#!/usr/bin/env runacton

# port of 1.py

import math

ln_tau = math.log(6.283185307179586)
ln_10 = math.log(float(10))


def sum_terms(a: int, b: int) -> (int, int):
    if b == a + 1:
        return 1, b
    mid = (a + b) // 2
    p_left, q_left = sum_terms(a, mid)
    p_right, q_right = sum_terms(mid, b)
    return p_left * q_right + p_right, q_left*q_right


def binary_search(n) -> int:
    a = 0
    b = 1
    while not test_k(n, b):
        a = b
        b *= 2
    while b - a > 1:
        m = (a + b) // 2
        if test_k(n, m):
            b = m
        else:
            a = m
    return b


def test_k(n, k) -> bool:
    if k <= 0:
        return False
    else:
        ln_k_factorial = float(k) * (math.log(float(k))-1) + 0.5 * ln_tau
        log_10_k_factorial = ln_k_factorial / ln_10
        return (int(log_10_k_factorial) >= n+50)

actor main(env):
    n = 27 if len(env.argv) < 2 else int(env.argv[1])
    k = binary_search(n)
    p, q = sum_terms(0, k - 1)
    p += q
    answer = p * (10 ** (n - 1)) // q
    s = str(answer)
    for i in range(0, n, 10):
        if i+10 <= n:
            print(s[i:i+10] + "\t:" + str(i+10))
        else:
            spaces = ""
            for j in range(0, (10-(len(str(s[i:])))), 1):
                spaces += " "
            print(s[i:] + spaces + "\t:" + str(n))
            #print(f'{s[i:]}{" "*(10-n%10)}\t:{n}')
    await async env.exit(0)
