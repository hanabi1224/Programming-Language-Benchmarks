version: 1.0.{build}
image: Ubuntu2004
pull_requests:
    do_not_increment_build_number: true
branches:
    only:
        - main
environment:
    VERCEL_TOKEN:
        secure: InPNy6LbDQf4YYKZAVYpTbO0uRIKI6D3Dt+nHvOVvS8=
build: off
cache:
    - /var/lib/docker/overlay2
    - /home/appveyor/.cache/yarn/v6
    - /home/appveyor/.nuget/packages
    - /home/appveyor/.npm
    - /home/appveyor/.yarn
    - /home/appveyor/.cargo
    - /home/appveyor/.udocker
    - /home/appveyor/.gradle
    - /home/appveyor/.konan
    - /home/appveyor/.stack
    - /home/appveyor/.opam/download-cache/
install:
    - docker info
    - nvm use 14
    - python -V
    # begin wasmer installation
    - curl https://get.wasmer.io -sSfL | sh
    - source $HOME/.wasmer/wasmer.sh
    - wasmer -V
    # end wasmer installation
    # begin wasmtime installation
    - curl https://wasmtime.dev/install.sh -sSf | bash
    - export PATH=$HOME/.wasmtime/bin:$PATH
    - wasmtime -V
    # end wasmtime installation
    # begin rust installation
    # - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    # - source $HOME/.cargo/env
    # - rustup target add wasm32-wasi
    # - rustc -V
    # end rust installation
    # begin opam installation
    # - wget https://github.com/ocaml/opam/releases/download/2.0.7/opam-2.0.7-x86_64-linux -O opam-installer
    # - sudo install opam-installer /usr/local/bin/opam
    # - opam --version
    # - opam init --disable-sandboxing
    # end opam installation
    # begin haskell installation
    - curl -sSL https://get.haskellstack.org/ | sh
    # end haskell installation
    # begin haxe && hashlink
    # - sudo add-apt-repository ppa:haxe/releases -y
    # - sudo apt-get update
    # - sudo apt-get install haxe -y
    # - mkdir /tmp/.hashlib && haxelib setup /tmp/.hashlib
    # - sudo apt-get install -y libpng-dev libturbojpeg-dev libvorbis-dev libopenal-dev libsdl2-dev libmbedtls-dev libuv1-dev
    # - wget https://github.com/HaxeFoundation/hashlink/archive/1.11.zip -O hashlink-1.11.zip
    # - unzip hashlink-1.11.zip
    # - pushd hashlink-1.11
    # - make
    # - sudo make install
    # - hl --version
    # - popd
    # end haxe && hashlink
    # begin tmp vlang installation
    # - mkdir /tmp/hostlib/
    # - docker run --rm -v /tmp/hostlib/:/working/ -w /working/ thevlang/vlang:alpine cp /lib/ld-musl-x86_64.so.1 .
    # - sudo cp /tmp/hostlib/ld-musl-x86_64.so.1 /lib/
    # - git clone https://github.com/vlang/v /tmp/vlang
    # - pushd /tmp/vlang
    # - make && ./v -version
    # - sudo ./v symlink
    # - v -prod examples/hanoi.v
    # - ./examples/hanoi
    # - popd
    # - v -version
    # end tmp vlang installation
    # begin deno installation
    - curl -fsSL https://deno.land/x/install/install.sh | sh
    - export PATH=$HOME/.deno/bin:$PATH
    - deno --version
    # end deno installation
    - update-alternatives --list java
    - echo $JAVA_HOME
    - export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
    - echo $JAVA_HOME
    - java -version
    - gradle -v
    - export PATH="$(yarn global bin):$PATH"
    - if [[ ! -z "${VERCEL_TOKEN}" ]]; then yarn global add vercel;fi
build_script:
    # benchmarks
    - pushd bench
    - dotnet run -c Release -p tool -- --task build #--langs wasm --verbose true
    - dotnet run -c Release -p tool -- --task test #--langs wasm
    - dotnet run -c Release -p tool -- --task bench --fail-fast true #--langs wasm
    - popd
    # build website with placeholder content
    - pushd website
    - yarn
    - yarn build
    # build website with updated content
    # - yarn
    - yarn content
    # - yarn build # Disable due to out of memory error
    - popd
artifacts:
    - path: bench/build/_results
      name: benchmark_results
    # - path: website/dist
    #   name: website
on_success:
    - if [[ ! -z "${VERCEL_TOKEN}" ]]; then vercel website --prod -f -c -C -t $VERCEL_TOKEN;fi
